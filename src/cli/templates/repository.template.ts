import { toPascalCase } from '../../utils/to_pascal_case.ts';

const generateRepositoryTemplate = (entityName: string): string => {
  const PascalName = toPascalCase(entityName);

  return [
    "import { FilterQuery, Model, MongooseUpdateQueryOptions, ProjectionType, QueryOptions, SaveOptions, UpdateQuery } from 'mongoose';",
    '',
    `import { I${PascalName}CreateDTO, I${PascalName}DTO, I${PascalName}Model, I${PascalName}Repository } from '../../interfaces/${entityName}.interface.ts';`,
    '',
    `class Mongo${PascalName}Repository implements I${PascalName}Repository {`,
    `  constructor(private readonly Model: Model<I${PascalName}Model>) {}`,
    '',
    `  public async create(data: I${PascalName}CreateDTO, options?: SaveOptions): Promise<I${PascalName}Model> {`,
    '    return await new this.Model(data).save(options);',
    '  }',
    '',
    `  public async findByObj(filter: FilterQuery<I${PascalName}Model>, projection?: ProjectionType<I${PascalName}Model>, options?: QueryOptions): Promise<I${PascalName}DTO[]> {`,
    '    return await this.Model.find(filter, projection, options).lean();',
    '  }',
    '',
    '  public async findOneByObj(',
    `    filter: FilterQuery<I${PascalName}Model>,`,
    `    projection?: ProjectionType<I${PascalName}Model>,`,
    '    options?: QueryOptions,',
    `  ): Promise<I${PascalName}DTO | null> {`,
    '    return await this.Model.findOne(filter, projection, options).lean();',
    '  }',
    '',
    `  public async updateOneByObj(filter: FilterQuery<I${PascalName}Model>, data: UpdateQuery<I${PascalName}Model>, options?: MongooseUpdateQueryOptions): Promise<void> {`,
    '    await this.Model.updateOne(filter, data, options);',
    '  }',
    '',
    `  public async updateManyByObj(filter: FilterQuery<I${PascalName}Model>, data: UpdateQuery<I${PascalName}Model>, options?: MongooseUpdateQueryOptions): Promise<void> {`,
    '    await this.Model.updateMany(filter, data, options);',
    '  }',
    '',
    `  public async deleteOneByObj(filter: FilterQuery<I${PascalName}Model>): Promise<void> {`,
    '    await this.Model.deleteOne(filter);',
    '  }',
    '',
    `  public async deleteManyByObj(filter: FilterQuery<I${PascalName}Model>): Promise<void> {`,
    '    await this.Model.deleteMany(filter);',
    '  }',
    '',
    `  public async upsert(filter: FilterQuery<I${PascalName}Model>, data: UpdateQuery<I${PascalName}Model>): Promise<I${PascalName}Model | null> {`,
    '    return await this.Model.findOneAndUpdate(filter, data, { upsert: true });',
    '  }',
    '',
    `  public async insertMany(data: I${PascalName}CreateDTO[]): Promise<I${PascalName}Model[]> {`,
    '    return await this.Model.insertMany(data);',
    '  }',
    '',
    `  public async countDocuments(filter: FilterQuery<I${PascalName}Model>): Promise<number> {`,
    '    return await this.Model.countDocuments(filter);',
    '  }',
    '}',
    '',
    `export { Mongo${PascalName}Repository };`,
  ].join('\n');
};

export { generateRepositoryTemplate };
